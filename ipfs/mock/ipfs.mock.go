// Code generated by MockGen. DO NOT EDIT.
// Source: ipfs/ipfs.go

// Package ipfsmock is a generated GoMock package.
package ipfsmock

import (
	context "context"
	ipfs "github.com/RTradeLtd/ipfs-orchestrator/ipfs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNodeClient is a mock of NodeClient interface
type MockNodeClient struct {
	ctrl     *gomock.Controller
	recorder *MockNodeClientMockRecorder
}

// MockNodeClientMockRecorder is the mock recorder for MockNodeClient
type MockNodeClientMockRecorder struct {
	mock *MockNodeClient
}

// NewMockNodeClient creates a new mock instance
func NewMockNodeClient(ctrl *gomock.Controller) *MockNodeClient {
	mock := &MockNodeClient{ctrl: ctrl}
	mock.recorder = &MockNodeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeClient) EXPECT() *MockNodeClientMockRecorder {
	return m.recorder
}

// Nodes mocks base method
func (m *MockNodeClient) Nodes(ctx context.Context) ([]*ipfs.NodeInfo, error) {
	ret := m.ctrl.Call(m, "Nodes", ctx)
	ret0, _ := ret[0].([]*ipfs.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Nodes indicates an expected call of Nodes
func (mr *MockNodeClientMockRecorder) Nodes(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockNodeClient)(nil).Nodes), ctx)
}

// CreateNode mocks base method
func (m *MockNodeClient) CreateNode(ctx context.Context, n *ipfs.NodeInfo, opts ipfs.NodeOpts) error {
	ret := m.ctrl.Call(m, "CreateNode", ctx, n, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNode indicates an expected call of CreateNode
func (mr *MockNodeClientMockRecorder) CreateNode(ctx, n, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockNodeClient)(nil).CreateNode), ctx, n, opts)
}

// StopNode mocks base method
func (m *MockNodeClient) StopNode(ctx context.Context, n *ipfs.NodeInfo) error {
	ret := m.ctrl.Call(m, "StopNode", ctx, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopNode indicates an expected call of StopNode
func (mr *MockNodeClientMockRecorder) StopNode(ctx, n interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopNode", reflect.TypeOf((*MockNodeClient)(nil).StopNode), ctx, n)
}

// Watch mocks base method
func (m *MockNodeClient) Watch(ctx context.Context) (<-chan ipfs.Event, <-chan error) {
	ret := m.ctrl.Call(m, "Watch", ctx)
	ret0, _ := ret[0].(<-chan ipfs.Event)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockNodeClientMockRecorder) Watch(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockNodeClient)(nil).Watch), ctx)
}
