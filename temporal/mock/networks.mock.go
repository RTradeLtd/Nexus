// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/RTradeLtd/Nexus/temporal"
	"github.com/RTradeLtd/database/models"
)

type FakePrivateNetworks struct {
	GetNetworkByNameStub        func(string) (*models.HostedNetwork, error)
	getNetworkByNameMutex       sync.RWMutex
	getNetworkByNameArgsForCall []struct {
		arg1 string
	}
	getNetworkByNameReturns struct {
		result1 *models.HostedNetwork
		result2 error
	}
	getNetworkByNameReturnsOnCall map[int]struct {
		result1 *models.HostedNetwork
		result2 error
	}
	GetOfflineNetworksStub        func(bool) ([]*models.HostedNetwork, error)
	getOfflineNetworksMutex       sync.RWMutex
	getOfflineNetworksArgsForCall []struct {
		arg1 bool
	}
	getOfflineNetworksReturns struct {
		result1 []*models.HostedNetwork
		result2 error
	}
	getOfflineNetworksReturnsOnCall map[int]struct {
		result1 []*models.HostedNetwork
		result2 error
	}
	SaveNetworkStub        func(*models.HostedNetwork) error
	saveNetworkMutex       sync.RWMutex
	saveNetworkArgsForCall []struct {
		arg1 *models.HostedNetwork
	}
	saveNetworkReturns struct {
		result1 error
	}
	saveNetworkReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateNetworkByNameStub        func(string, map[string]interface{}) error
	updateNetworkByNameMutex       sync.RWMutex
	updateNetworkByNameArgsForCall []struct {
		arg1 string
		arg2 map[string]interface{}
	}
	updateNetworkByNameReturns struct {
		result1 error
	}
	updateNetworkByNameReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePrivateNetworks) GetNetworkByName(arg1 string) (*models.HostedNetwork, error) {
	fake.getNetworkByNameMutex.Lock()
	ret, specificReturn := fake.getNetworkByNameReturnsOnCall[len(fake.getNetworkByNameArgsForCall)]
	fake.getNetworkByNameArgsForCall = append(fake.getNetworkByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetNetworkByName", []interface{}{arg1})
	fake.getNetworkByNameMutex.Unlock()
	if fake.GetNetworkByNameStub != nil {
		return fake.GetNetworkByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getNetworkByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePrivateNetworks) GetNetworkByNameCallCount() int {
	fake.getNetworkByNameMutex.RLock()
	defer fake.getNetworkByNameMutex.RUnlock()
	return len(fake.getNetworkByNameArgsForCall)
}

func (fake *FakePrivateNetworks) GetNetworkByNameCalls(stub func(string) (*models.HostedNetwork, error)) {
	fake.getNetworkByNameMutex.Lock()
	defer fake.getNetworkByNameMutex.Unlock()
	fake.GetNetworkByNameStub = stub
}

func (fake *FakePrivateNetworks) GetNetworkByNameArgsForCall(i int) string {
	fake.getNetworkByNameMutex.RLock()
	defer fake.getNetworkByNameMutex.RUnlock()
	argsForCall := fake.getNetworkByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePrivateNetworks) GetNetworkByNameReturns(result1 *models.HostedNetwork, result2 error) {
	fake.getNetworkByNameMutex.Lock()
	defer fake.getNetworkByNameMutex.Unlock()
	fake.GetNetworkByNameStub = nil
	fake.getNetworkByNameReturns = struct {
		result1 *models.HostedNetwork
		result2 error
	}{result1, result2}
}

func (fake *FakePrivateNetworks) GetNetworkByNameReturnsOnCall(i int, result1 *models.HostedNetwork, result2 error) {
	fake.getNetworkByNameMutex.Lock()
	defer fake.getNetworkByNameMutex.Unlock()
	fake.GetNetworkByNameStub = nil
	if fake.getNetworkByNameReturnsOnCall == nil {
		fake.getNetworkByNameReturnsOnCall = make(map[int]struct {
			result1 *models.HostedNetwork
			result2 error
		})
	}
	fake.getNetworkByNameReturnsOnCall[i] = struct {
		result1 *models.HostedNetwork
		result2 error
	}{result1, result2}
}

func (fake *FakePrivateNetworks) GetOfflineNetworks(arg1 bool) ([]*models.HostedNetwork, error) {
	fake.getOfflineNetworksMutex.Lock()
	ret, specificReturn := fake.getOfflineNetworksReturnsOnCall[len(fake.getOfflineNetworksArgsForCall)]
	fake.getOfflineNetworksArgsForCall = append(fake.getOfflineNetworksArgsForCall, struct {
		arg1 bool
	}{arg1})
	fake.recordInvocation("GetOfflineNetworks", []interface{}{arg1})
	fake.getOfflineNetworksMutex.Unlock()
	if fake.GetOfflineNetworksStub != nil {
		return fake.GetOfflineNetworksStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getOfflineNetworksReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePrivateNetworks) GetOfflineNetworksCallCount() int {
	fake.getOfflineNetworksMutex.RLock()
	defer fake.getOfflineNetworksMutex.RUnlock()
	return len(fake.getOfflineNetworksArgsForCall)
}

func (fake *FakePrivateNetworks) GetOfflineNetworksCalls(stub func(bool) ([]*models.HostedNetwork, error)) {
	fake.getOfflineNetworksMutex.Lock()
	defer fake.getOfflineNetworksMutex.Unlock()
	fake.GetOfflineNetworksStub = stub
}

func (fake *FakePrivateNetworks) GetOfflineNetworksArgsForCall(i int) bool {
	fake.getOfflineNetworksMutex.RLock()
	defer fake.getOfflineNetworksMutex.RUnlock()
	argsForCall := fake.getOfflineNetworksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePrivateNetworks) GetOfflineNetworksReturns(result1 []*models.HostedNetwork, result2 error) {
	fake.getOfflineNetworksMutex.Lock()
	defer fake.getOfflineNetworksMutex.Unlock()
	fake.GetOfflineNetworksStub = nil
	fake.getOfflineNetworksReturns = struct {
		result1 []*models.HostedNetwork
		result2 error
	}{result1, result2}
}

func (fake *FakePrivateNetworks) GetOfflineNetworksReturnsOnCall(i int, result1 []*models.HostedNetwork, result2 error) {
	fake.getOfflineNetworksMutex.Lock()
	defer fake.getOfflineNetworksMutex.Unlock()
	fake.GetOfflineNetworksStub = nil
	if fake.getOfflineNetworksReturnsOnCall == nil {
		fake.getOfflineNetworksReturnsOnCall = make(map[int]struct {
			result1 []*models.HostedNetwork
			result2 error
		})
	}
	fake.getOfflineNetworksReturnsOnCall[i] = struct {
		result1 []*models.HostedNetwork
		result2 error
	}{result1, result2}
}

func (fake *FakePrivateNetworks) SaveNetwork(arg1 *models.HostedNetwork) error {
	fake.saveNetworkMutex.Lock()
	ret, specificReturn := fake.saveNetworkReturnsOnCall[len(fake.saveNetworkArgsForCall)]
	fake.saveNetworkArgsForCall = append(fake.saveNetworkArgsForCall, struct {
		arg1 *models.HostedNetwork
	}{arg1})
	fake.recordInvocation("SaveNetwork", []interface{}{arg1})
	fake.saveNetworkMutex.Unlock()
	if fake.SaveNetworkStub != nil {
		return fake.SaveNetworkStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.saveNetworkReturns
	return fakeReturns.result1
}

func (fake *FakePrivateNetworks) SaveNetworkCallCount() int {
	fake.saveNetworkMutex.RLock()
	defer fake.saveNetworkMutex.RUnlock()
	return len(fake.saveNetworkArgsForCall)
}

func (fake *FakePrivateNetworks) SaveNetworkCalls(stub func(*models.HostedNetwork) error) {
	fake.saveNetworkMutex.Lock()
	defer fake.saveNetworkMutex.Unlock()
	fake.SaveNetworkStub = stub
}

func (fake *FakePrivateNetworks) SaveNetworkArgsForCall(i int) *models.HostedNetwork {
	fake.saveNetworkMutex.RLock()
	defer fake.saveNetworkMutex.RUnlock()
	argsForCall := fake.saveNetworkArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePrivateNetworks) SaveNetworkReturns(result1 error) {
	fake.saveNetworkMutex.Lock()
	defer fake.saveNetworkMutex.Unlock()
	fake.SaveNetworkStub = nil
	fake.saveNetworkReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePrivateNetworks) SaveNetworkReturnsOnCall(i int, result1 error) {
	fake.saveNetworkMutex.Lock()
	defer fake.saveNetworkMutex.Unlock()
	fake.SaveNetworkStub = nil
	if fake.saveNetworkReturnsOnCall == nil {
		fake.saveNetworkReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveNetworkReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePrivateNetworks) UpdateNetworkByName(arg1 string, arg2 map[string]interface{}) error {
	fake.updateNetworkByNameMutex.Lock()
	ret, specificReturn := fake.updateNetworkByNameReturnsOnCall[len(fake.updateNetworkByNameArgsForCall)]
	fake.updateNetworkByNameArgsForCall = append(fake.updateNetworkByNameArgsForCall, struct {
		arg1 string
		arg2 map[string]interface{}
	}{arg1, arg2})
	fake.recordInvocation("UpdateNetworkByName", []interface{}{arg1, arg2})
	fake.updateNetworkByNameMutex.Unlock()
	if fake.UpdateNetworkByNameStub != nil {
		return fake.UpdateNetworkByNameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateNetworkByNameReturns
	return fakeReturns.result1
}

func (fake *FakePrivateNetworks) UpdateNetworkByNameCallCount() int {
	fake.updateNetworkByNameMutex.RLock()
	defer fake.updateNetworkByNameMutex.RUnlock()
	return len(fake.updateNetworkByNameArgsForCall)
}

func (fake *FakePrivateNetworks) UpdateNetworkByNameCalls(stub func(string, map[string]interface{}) error) {
	fake.updateNetworkByNameMutex.Lock()
	defer fake.updateNetworkByNameMutex.Unlock()
	fake.UpdateNetworkByNameStub = stub
}

func (fake *FakePrivateNetworks) UpdateNetworkByNameArgsForCall(i int) (string, map[string]interface{}) {
	fake.updateNetworkByNameMutex.RLock()
	defer fake.updateNetworkByNameMutex.RUnlock()
	argsForCall := fake.updateNetworkByNameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePrivateNetworks) UpdateNetworkByNameReturns(result1 error) {
	fake.updateNetworkByNameMutex.Lock()
	defer fake.updateNetworkByNameMutex.Unlock()
	fake.UpdateNetworkByNameStub = nil
	fake.updateNetworkByNameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePrivateNetworks) UpdateNetworkByNameReturnsOnCall(i int, result1 error) {
	fake.updateNetworkByNameMutex.Lock()
	defer fake.updateNetworkByNameMutex.Unlock()
	fake.UpdateNetworkByNameStub = nil
	if fake.updateNetworkByNameReturnsOnCall == nil {
		fake.updateNetworkByNameReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateNetworkByNameReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePrivateNetworks) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getNetworkByNameMutex.RLock()
	defer fake.getNetworkByNameMutex.RUnlock()
	fake.getOfflineNetworksMutex.RLock()
	defer fake.getOfflineNetworksMutex.RUnlock()
	fake.saveNetworkMutex.RLock()
	defer fake.saveNetworkMutex.RUnlock()
	fake.updateNetworkByNameMutex.RLock()
	defer fake.updateNetworkByNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePrivateNetworks) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ temporal.PrivateNetworks = new(FakePrivateNetworks)
